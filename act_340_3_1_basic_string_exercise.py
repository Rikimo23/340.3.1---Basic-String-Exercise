# -*- coding: utf-8 -*-
"""ACT 340.3.1 - Basic String Exercise

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uv4wuXlkylRqUs_yjsAFNXYi6SM-hiZC

# String Practice Excercises- Basics

A string is a series of characters in Python. Anything inside of quotes is considreed a string. You can use single or double quotes around of a string.
"""

string1= "This is a python string"
string2= 'This is also a python string'

"""This flexibility allows you to use quotes and apostrophes within our strings."""

string3= "I told my friend, 'Python is my favorite programming language!'"

"""All strings are part of the String Class in python. Because of this, we have access to all of the methods that exist within that Class. The way we use methods on string methods is called "dot notation".

"""

name= 'sammi'
print(name.title())
print(name)

"""In the example above, the variable "name" is referrring to the string object "sammi". We add the method(a function that belongs to a specific class) to the variable with a period. We are telling Python to perform the title method on the name variable.

This method changes the first charachter of the each letter in a string to an uppercase letter only in the print statment. Since strings are immutable, we are not actually changing the value that is stored. We would need to create a new string value if we wanted to keep the change permenantely.
<br>
</br>
You can find a list of all the methods that belong to the String Class here:
https://www.w3schools.com/python/python_ref_string.asp

**Problem 1**

Use the following string to practice the string methods below:

"Everything is an Object in Python!!!"
<br>
</br>

*   Convert the entire string to uppercase
*   Convert the entire string to lowercase
*   Convert only the first letter to uppercase
"""

stringy = "Everything is an Object in Python!!!"
print(stringy)
print(stringy.upper())
print(stringy.lower())
print(stringy.capitalize())

"""# Using Variables in Strings

There are often times you will want to use a variabe inside of a string. There are a few ways to do this, but the most common way is to use f-strings.
"""

first_name= "john"
last_name= "doe"
full_name= f"{first_name} {last_name}"

print(full_name)

"""The "f" stands for format because Python formats the string by replacing the name of any variable in braces with its value. It is placed before the first quotation mark in the string you want to format.

<br>
</br>
We can also use our string methods inside of our f-strings.
"""

print(f"Hello, {full_name.title()}")

"""# Stripping Whitespace

In Python, the string "animal" and "animal " are not equal. The whitespace becomes especially important when checking for the length of a string or comparing two strings. The string class has methods to help us remove whitespace.
"""

phrase= " reindeer games "

print(phrase.rstrip())
print(phrase.lstrip())
print(phrase.strip())

"""A real-world scenario removing whitespace is to clean the values from user input or from data sets.

**Problem 2**

Find a short quote and its author. Assign the quote to a variable and assign the name of the author to another variable.

Use fstring to create a new variable called message the replicates the following format:

"Michael Scott once said, "I'm not superstitious but I am a little stitious."
"""

Famous = "Valerie"

Quote = "Patience, young grasshopper"

print(f'{Famous} once said, "{Quote}."')
print("{} once said, '{}.'".format(Famous,Quote))

"""# String Indexing and Slicing

Because a string is a sequence, it can be accessed in the same ways that other sequence-based data types are, through indexing and slicing.

Like the list data type that has items that correspond to an index number, each of a stringâ€™s characters also correspond to an index number, starting with the index number 0.

If we want to access a particular index in a string we can do this using square brackets.

"""

course= "Per Scholas"

print(course[1])
print(course[3])
print(course[-5])

"""As you can see from the example above, we can access indexes by positive or negative integers in side the square bracket.

The positive integers start from the left at the 0 index and negative integers start from the right at -1(which denotes the last charachter in a string).

Slicing in Python is a feature that enables accessing parts of the sequence. In slicing a string, we create a substring, which is essentially a string that exists within another string.

We use slicing when we require a part of the string and not the complete string.

<br></br>
Syntax:

string[start : end : step]

start : We provide the starting index.

end : We provide the end index(this is not included in substring).

step : It is an optional argument that determines the increment between each index for slicing.
"""

string1= "Slicing strings is easy!"

print(string1[:3])
print(string1[1: 6: 2])
print(string1[-1: -8: -2])
print(string1[: : -1])

"""**Problem 3**

Create a string to practice indexing and slicing on.


*  Include at least on whitespace
*  Include at least one special charachter
*  Must have a length of at least 10

Complete the following

*  Reverse the entire string
*  Get the last charachter of the string
*  Get every other chrachter in the string
*  Check the length of the string
*  Get the 4th charachter in the string
*  Get the 4th charachter through the 9th charachter in the string
*  Get the 7th through last charachter in the string




"""

string1= "I love my Job"

print(string1[:3])

print(string1[1: 6: 2])

print(string1[-1: -8: -2])

print(string1[: : -1])